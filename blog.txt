# Integrating your orginization

But where should I put myu orginizations policy files you ask? You can and
should organize your policies in any way that makes sense to you. I very much
encourage you to come to a consensus as an orginization, or at least team. Seek
input from others if its up to a single person alone, and be sure to record
your reasons for choosing the a specific pattern. There truly is no right or
wrong.

That having been said, I encourage you to organize your policy from a "service"
perspective. Service can also be a loaded word. To a sysadmin, a service may
mean an individual daemon like Apache, Nginx, or WebSphere. However services
are also combinations of other services like the ERP application, which may be
comprised of multiple tiers of database servers, webservers and loadbalancers.
When I say service I mean the highest level of abstraction you and your team
are comfortable with. I hope to show some examples that illustrate various
scales of "service", and explain the things I like about this structure.

Let's start with the highest level of orginization being either our company, or
our team. In the example I will use `skeletorg` because its a skeleton of an
example orginization and it brings to mind [the power of Greyskull][He-Man].

We will create the `skeletorg` directory inside of the services directory at
the top level of masterfiles and put all of our custom policy and files inside
of it. If you don't know what masterfiles is please read the documentation
[here][policy-framework], [here][authoring-workflow],
[here][bundles-best-practice] and [here][policy-style].

Lets go ahead and make a few additons to `promises.cf` (the default policy
entry). In order for your orginizations policy to be evaluated your policy files must
be added to `inputs` in `body common control`, and then your policy must be
activated by either the bundle sequence or a [methods type promise][methods]

Here is a diff that shows additions I have made to the [default `promises.cf`
that ships with CFEngine 3.6.1][3.6.1-promises.cf].

```diff
diff --git a/promises.cf b/promises.cf
index af6f89f..5dd3eae 100644
--- a/promises.cf
+++ b/promises.cf
@@ -12,6 +12,7 @@ body common control
                         # Common bundle first (Best Practice)
                           inventory_control,
                           @(inventory.bundles),
+                          @(skeletorg_main_file_control.common_bundles),
                           def,
                           cfe_internal_hub_vars,
 
@@ -26,6 +27,7 @@ body common control
                           cfe_internal_management,   # See cfe_internal/CFE_cfengine.cf
                           service_catalogue,
 
+
       };
 
       inputs => {
@@ -66,6 +68,7 @@ body common control
 
                 # List of services here
                   "services/file_change.cf",
+                  "services/skeletorg/main.cf",
 
       };
 
@@ -233,6 +236,15 @@ bundle agent service_catalogue
       handle => "service_catalogue_change_management",
       usebundle => change_management;
 
+   # Here is the main policy entry for our orginization. If other groups want
+   # to start managing their own policies, or if we acquire another
+   # orginization, we can greate an org tree for them and activate it here.
+      "skeletorg"
+        usebundle => skeletorg_main,
+        handle => "service_catalogue_methods_any_skeletorg",
+        comment => "If we don't activate policy for skeletorg, then the whole
+                    orginization will not know if it is as desirged or not.";
+
 }
 
 # special body for update/*.cf compatibility
```

First I updated the bundlesequence to include `@(skeletorg_main_file_control.common_bundles)`
very early in the [bundlesequence][bundlesequence]. This will be a list of common bundles that
skeletorg will use primarily for classification.

Second I added the path to skeletorgs main poilcy. It will include the rest of
the policy files needed.

Finally, I activated the main policy using a [methods type promise][methods]


[bundlesequence]https://docs.cfengine.com/latest/reference-components.html#bundlesequence)
[He-Man](http://en.wikipedia.org/wiki/He-Man)
[policy-framework](https://docs.cfengine.com/latest/guide-writing-and-serving-policy-policy-framework.html)
[policy-style](https://docs.cfengine.com/latest/guide-writing-and-serving-policy-policy-style.html)
[authoring-workflow](https://docs.cfengine.com/latest/guide-writing-and-serving-policy-authoring-policy-tools-and-workflow.html)
[bundles-best-practice](https://docs.cfengine.com/latest/guide-writing-and-serving-policy-bundles-best-practices.html)
[methods](https://docs.cfengine.com/latest/reference-promise-types-methods.html)
[3.6.1-promises.cf](https://github.com/cfengine/masterfiles/blob/3.6.1/promises.cf)

